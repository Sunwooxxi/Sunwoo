예외 처리 개요
주요 예외 유형
예외 처리 구문
예외 처리 과정의 흐름
예외 처리의 중요성
기본 함수 개요
유용한 기본 함수
결론                                                                                                               
예외 처리 개요
내용:
프로그램 실행 중 발생하는 오류
예외가 발생하면 프로그램이 비정상적으로 종료
예외 처리를 통해 프로그램의 안정성 향상
주요 예외 유형
내용:
ZeroDivisionError: 0으로 나누기 시도
ValueError: 올바르지 않은 값
TypeError: 잘못된 데이터 타입 사용
FileNotFoundError: 파일이 존재하지 않음
IndexError: 리스트 등에서 잘못된 인덱스 접근
예외 처리 구문
내용:
파이썬에서 예외 처리는 try-except 블록을 사용합니다.
구문:
try:
    # 예외가 발생할 수 있는 코드
except 예외타입:
    # 예외가 발생했을 때 실행할 코드
finally:
    # (선택 사항) 예외 발생 여부와 상관없이 실행되는 코드
예시:
try:
    result = 10 / 0
except ZeroDivisionError:
    print("0으로 나눌 수 없습니다.")
finally:
    print("프로그램이 종료됩니다.")
예외 처리 과정의 흐름
내용:
try 블록 실행: 파이썬은 try 블록의 첫 번째 줄부터 코드를 실행 → 예외 발생 시 예외를 처리할 수 있는 except 블록 실행 → 예외가 발생하지 않으면 except 블록을 건너뛰고 finally 블록으로 이동
예외 발생 시:  try 블록의 나머지 코드 생략 → 해당 예외를 처리할 수 있는 except 블록이 있으면 실행 → 처리할 수 있는 except 블록이 없으면  프로그램은 중단되고, 예외 표시
finally 블록 실행: finally 블록은 예외 발생 여부와 상관없이 항상 실행 → 주로 리소스를 해제하거나 마무리 작업을 수행하는 데 사용
예외 처리의 중요성
내용:
프로그램의 비정상적인 종료 방지
오류에 대한 명확한 피드백 제공
프로그램의 유연성 및 견고성 향상
기본 함수 개요
내용:
파이썬은 다양한 기본 함수를 제공하여 더욱 효율적인 코딩 제공
기본 함수는 별도의 모듈을 import하지 않고 사용 가능
 유용한 기본 함수
내용:
print(): 콘솔에 출력
len(): 시퀀스의 길이 반환
range(): 숫자 범위 생성
type(): 객체의 데이터 타입 반환
input(): 사용자 입력 받기
sum(): 숫자의 합계 계산
예시:
nums = [1, 2, 3, 4, 5]
print("합계:", sum(nums))
합계: 15
결론
내용:
예외 처리 과정은 프로그램의 안정성과 사용자 경험을 개선
파이썬의 기본 함수는 빠르고 효율적인 코딩
항상 코드의 오류를 예상하고 적절한 예외 처리
